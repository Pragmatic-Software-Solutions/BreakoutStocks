package com.finance.tracker.breakout.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StockDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockDetailsAllPropertiesEquals(StockDetails expected, StockDetails actual) {
        assertStockDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertStockDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockDetailsAllUpdatablePropertiesEquals(StockDetails expected, StockDetails actual) {
        assertStockDetailsUpdatableFieldsEquals(expected, actual);
        assertStockDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockDetailsAutoGeneratedPropertiesEquals(StockDetails expected, StockDetails actual) {
        assertThat(expected)
            .as("Verify StockDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockDetailsUpdatableFieldsEquals(StockDetails expected, StockDetails actual) {
        assertThat(expected)
            .as("Verify StockDetails relevant properties")
            .satisfies(e -> assertThat(e.getCurPrice()).as("check curPrice").isEqualTo(actual.getCurPrice()))
            .satisfies(e -> assertThat(e.getPriceChange()).as("check priceChange").isEqualTo(actual.getPriceChange()))
            .satisfies(e -> assertThat(e.getChangePer()).as("check changePer").isEqualTo(actual.getChangePer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockDetailsUpdatableRelationshipsEquals(StockDetails expected, StockDetails actual) {
        assertThat(expected)
            .as("Verify StockDetails relationships")
            .satisfies(e -> assertThat(e.getStock()).as("check stock").isEqualTo(actual.getStock()));
    }
}
